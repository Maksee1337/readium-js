define(['jquery', 'underscore', 'eventEmitter', './helpers', './handlers' ],    function($, _, EventEmitter, Helpers, Handlers) {    return function () {        let self = this;        let _ids = [];        self.audioService = '';        this.getCurrentChapterName = function () {            return ReadiumSDK.reader.getPaginationInfo().openPages[0].idref;        }        this.addSpansToTextParts = function (currentChapter) {            const encoder = new TextEncoder();            var regExp = /[a-zA-Z]/g;            const body = ReadiumSDK.reader.getElements(currentChapter)[1];            let str = body.innerHTML;            let start = 0;            let length = str.length;            let spansCount = 0            for (let i = 0; i < length; i++) {                if (str[i] === '>') {                    start = i;                }                if (str[i] === '<') {                    if (i - start) {                        const text = str.substring(start + 1, i);                        if (text !== undefined && regExp.test(text)) {                            // todo divide text by sentences based on content length                            let newText = `<span id="spanHL${spansCount++}">${text}</span>`;                            str = str.substring(0, start + 1) + newText + str.substring(i);                            length += (newText.length - text.length);                            i += (newText.length - text.length);                        }                    }                }            }            body.innerHTML = str;            const textPartSpans = [];            for (let i = 0; i < spansCount; i++) {                const el = body.ownerDocument.getElementById(`spanHL${i}`);                textPartSpans.push(el);            }            return Helpers.divideSpanListOnPartsBy3000Bytes(textPartSpans);        }        this.addSpansToWords = function (pollyResponse,spansParts) {            // todo ........            console.log(pollyResponse, spansParts)            let pos = 0;            let spanId = 0;            let offset = 0;            const encoder = new TextEncoder();            let wordIndex;            _ids = [];_ids = []            pollyResponse.forEach((element, index) => {                const _jsonResponse = element.jsonResponse;                wordIndex = 0;                console.log(element, index);                offset = !index ? 0 : offset+encoder.encode(spansParts[index-1].text).length;                console.log(offset);                spansParts[index].spans.forEach((e) => {                    let text = e.innerText;                    let length = text.length;                    let html = '';                    for (let i = 0; i < length; i++) {                        if (pos === _jsonResponse[wordIndex].start + offset) {                            const id = Helpers.getIdFromPosition(_jsonResponse[wordIndex].start, _jsonResponse[wordIndex].end);                            _ids.push(id);                            html += `<span id="${id}">`;                            for (i; pos < _jsonResponse[wordIndex].end + offset && i < length; i++) {                                html += text[i];                                pos += encoder.encode(text[i]).length;                            }                            html += '</span>';                            if (wordIndex < _jsonResponse.length - 1) { wordIndex++; }                            i--;                        } else {                            html += text[i];                            pos += encoder.encode(text[i]).length;                        }                    }                    e.innerHTML = html;                    pos++;                });            });            // todo ....            const spine = ReadiumSDK.reader.getPaginationInfo().openPages[0];            const body = ReadiumSDK.reader.getElements(spine.idref)[1];            for (let i = 0 ; i < _ids.length ; i++) {                const el = body.ownerDocument.getElementById(_ids[i]);                el.onmouseover = () => {Handlers.addHighlight(el)};                el.onmouseout = () => {Handlers.removeHighlight(el)};            }        }        this.addClickHandler = function (_audioService) {            for (let i = 0 ; i < _ids.length ; i++) {                const el = body.ownerDocument.getElementById(_ids[i]);                el.onclick = () => {Handlers.click(el)};            }        }    };});