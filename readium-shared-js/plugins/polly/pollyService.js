define(['jquery', 'underscore', 'eventEmitter'],    function($, _, EventEmitter, ) {    return function (polly) {        var self = this;        let _polly = polly;        const templateJson = () => {            return {                OutputFormat: "json",                Text: '',                TextType: "text",                VoiceId: "Matthew",                SpeechMarkTypes: ['word'], //'sentence', 'word', 'ssml', 'viseme'            }        };        const templateMp3 = () => {            return {                OutputFormat: "mp3",                Text: '',                TextType: "text",                VoiceId: "Matthew",                SampleRate : "16000",            }        };        function synthesizeSpeechPromise(speechParams, index) {            return new Promise((resolve, reject) => {                _polly.synthesizeSpeech(speechParams, async function (error, data) {                    if (error) {                        reject(error);                    } else if (data) {                        const contentArray = (new TextDecoder().decode(data.AudioStream)).split("\n");                        const jsonResponse = [];                        for (let i in contentArray) {                            if (contentArray[i]) {                                jsonResponse.push(JSON.parse(contentArray[i]));                            }                        }                        resolve({index, jsonResponse});                    }                });            })        }        this.getJSONObjects = function (spanParts) {            const promises = [];            spanParts.forEach((e, index) => {                const speechParams = templateJson();                speechParams.Text = e.text;                promises.push(synthesizeSpeechPromise(speechParams, index));            });           return Promise.all(promises);        }        function getSynthesizeSpeechURLPromise(speechParams, index) {            return new Promise((resolve, reject) => {                let signer = new AWS.Polly.Presigner(speechParams, _polly);                signer.getSynthesizeSpeechUrl(speechParams, function(error, url) {                    if (error) {                        reject(error);                    } else {                        resolve({index, url});                    }                });            })        }        this.getAudioLinks = function (spanParts) {            const promises = [];            spanParts.forEach((e, index) => {                const speechParams = templateMp3();                speechParams.Text = e.text;                promises.push(getSynthesizeSpeechURLPromise(speechParams, index));            });            return Promise.all(promises);        }    };});