define(['jquery', 'underscore', 'eventEmitter', './helpers', './handlers', './tokenize.service'],    function($, _, EventEmitter, Helpers, Handlers, TokenizeService) {    return function () {        let self = this;        let _tokenizeService = new TokenizeService();        let _currentChapter;        let _taggedWordsIds = [];        let _taggedWordsCount = 0;        this.getCurrentChapterName = function () {            _currentChapter = ReadiumSDK.reader.getPaginationInfo().openPages[0].idref;            return _currentChapter;        }        function _addSpansToTextNodes () {            const encoder = new TextEncoder();            var regExp = /[a-zA-Z]/g;            const body = ReadiumSDK.reader.getElements(_currentChapter)[1];            let str = body.innerHTML;            let start = 0;            let length = str.length;            let spansCount = 0            for (let i = 0; i < length; i++) {                if (str[i] === '>') {                    start = i;                }                if (str[i] === '<') {                    if (i - start) {                        const text = str.substring(start + 1, i);                        if (text !== undefined && regExp.test(text)) {                            let newText = `<span id="spanHL${spansCount++}">${text}</span>`;                            str = str.substring(0, start + 1) + newText + str.substring(i);                            length += (newText.length - text.length);                            i += (newText.length - text.length);                        }                    }                }            }            body.innerHTML = str;            const textPartSpans = [];            for (let i = 0; i < spansCount; i++) {                const el = body.ownerDocument.getElementById(`spanHL${i}`);                textPartSpans.push(el);            }            return textPartSpans;        }        function _addActions() {            const body = ReadiumSDK.reader.getElements(_currentChapter)[1];            for (let i = 0 ; i < _taggedWordsCount ; i++){                const el = body.ownerDocument.getElementById(_taggedWordsIds[i]);                el.onmouseover = () => {Handlers.addHighlight(el)};                el.onmouseout = () => {Handlers.removeHighlight(el)};            }        }        function _getTaggedWord(token) {            if(token.type === 'id') {                const id = `w${_taggedWordsCount++}`;                _taggedWordsIds.push(id);                return `<span id="${id}">${token.text}</span>`;            } else {                return token.text;            }        }        function _addSpansToWords(span, tokens){            const str = span.textContent;            let html = '';            let tokenIndex = 0;            for (let i = 0 ; i < str.length ; ) {                if(i === tokens[tokenIndex].pos) {                    const token = tokens[tokenIndex];                    const word = token.text;                    html += _getTaggedWord(token);                    i+=word.length;                    tokenIndex++;                } else {                    html += str[i];                    i++                }            }            span.innerHTML = html;        }        this.tokenizeChapter = function () {            const spans = _addSpansToTextNodes ();            console.log(spans);            _taggedWordsIds = [];            _taggedWordsCount = 0;            spans.forEach((e) => {                _addSpansToWords(e, _tokenizeService.getObjectsFromText(e.textContent));                _addActions();            });        }    };});