define(['jquery', 'underscore', 'eventEmitter', './helpers', './handlers', './tokenize.service', './translate.service'],    function ($, _, EventEmitter, Helpers, Handlers, TokenizeService, TranslateService) {        return function () {            let self = this;            let _tokenizeService = new TokenizeService();            let _translateService = new TranslateService();            let _currentChapter;            let _taggedWordsIds = [];            let _taggedWordsCount = 0;            this.getCurrentChapterName = function () {                _currentChapter = ReadiumSDK.reader.getPaginationInfo().openPages[0].idref;                return _currentChapter;            }            function _addSpansToTextNodes(contentDocumentData) {                var regExp = /[a-zA-Z]/g;                // todo: ...                const head = contentDocumentData.substring(0,contentDocumentData.toLowerCase().indexOf('<body>'));                const body = contentDocumentData.substring(contentDocumentData.toLowerCase().indexOf('<body>'), contentDocumentData.toLowerCase().indexOf('</body>')+7);                const foot = contentDocumentData.substring(contentDocumentData.toLowerCase().indexOf('</body>')+7,contentDocumentData.length);                 // console.log('xaaw contentDocumentData', contentDocumentData)                 // console.log('xaaw head', head)                 // console.log('xaaw body', body)                 // console.log('xaaw foot', foot)                let spansCount = 0                let str = body;                let start = 0;                let length = str.length;                for (let i = 0; i < length; i++) {                    if (str[i] === '>') {                        start = i;                    }                    if (str[i] === '<') {                        if (i - start) {                            const text = str.substring(start + 1, i);                            if (text !== undefined && regExp.test(text)) {                             //   let newText = `<span id="spanHL${spansCount++}">${text}</span>`;                                let newText = _addSpansToWords(text, _tokenizeService.getObjectsFromText(text));                                console.log('xaaw 2', newText)                                str = str.substring(0, start + 1) + newText + str.substring(i);                                length += (newText.length - text.length);                                i += (newText.length - text.length);                            }                        }                    }                }                let res = head+str+foot;                ReadiumSDK.reader.once('PaginationChanged', () => {                    for(let i = 0 ; i < 2 ; i++) {                        const idref = ReadiumSDK.reader.getPaginationInfo().openPages[i].idref;                        if(idref) {                            const body = ReadiumSDK.reader.getElements(idref)[1];                            const spans = body.ownerDocument.getElementsByTagName('span');                            Array.from(spans).forEach((el) => {                                 if(el.id.indexOf('manW') !== -1) {                                     console.log('xaaq el', el, el.id.indexOf('manW') )                                     el.onmouseover = () => { Handlers.addHighlight(el, _translateService) };                                     el.onmouseout = () => { Handlers.removeHighlight(el) };                                 }                            })                        }                    }                });                return res;            }            function _addSpansToWords(text, tokens) {                const str = text;                let html = '';                let tokenIndex = 0;                for (let i = 0; i < str.length;) {                    if (i === tokens[tokenIndex].pos) {                        const token = tokens[tokenIndex];                        const word = token.text;                        html += _getTaggedWord(token);                        i += word.length;                        tokenIndex++;                    } else {                        html += str[i];                        i++                    }                }                return html;            }            function _getTaggedWord(token) {                if (token.type === 'id') {                    const id = `manW${_taggedWordsCount++}`;                    _taggedWordsIds.push(id);                    return `<span id="${id}">${token.text}</span>`;                } else {                    return token.text;                }            }            this.tokenizeBody = function (contentDocumentData) {                return _addSpansToTextNodes(contentDocumentData);            }        };    });