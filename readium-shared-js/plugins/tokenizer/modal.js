define(['./translate.service'],function() {    function _getPositionForModal(element) {        const rect = element.getBoundingClientRect();        const viewportRect = document.getElementById("viewport").getBoundingClientRect();        console.log('xaas w', element.getBoundingClientRect());        return {            top: `${rect.y+viewportRect.y}px`,            left: `${rect.x+viewportRect.x}px`,        }    }    return {        showModal: function (element, translateService) {            const {top, left} = _getPositionForModal(element);       //     alert(top+' - '+left)            const modal = document.createElement('div')            modal.classList.add('modal')  // create the inner modal div with appended argument            ////////////////            const child = document.createElement('div')            child.classList.add('child')            child.style.top = top;            child.style.left = left;////////////            const closeButton = document.createElement('button')            closeButton.classList.add('closeButton')            closeButton.innerHTML = `Close`;            closeButton.addEventListener('click', () => {                const modal = document.querySelector('.modal')                if (modal) {                    modal.remove()                }            });////////////////////////            const text1 = document.createElement('div')            text1.classList.add('translate-message1')            text1.innerHTML = `Word: <b>${element.innerText}</b>`;////////////////////////            const text2 = document.createElement('div')            text2.classList.add('translate-message2');            const text3 = document.createElement('div')            text3.classList.add('translate-message3');////////////////////////            translateService.translate(element.innerText).then((res) => {                text2.innerHTML = `Translation: <b>${res.translation}</b>`;                if(res.definition) {                    text3.innerHTML = `Definition: <b>${res.definition[0].meaning}</b>`;                }            });            child.appendChild(text1)            child.appendChild(text2)            child.appendChild(text3)            child.appendChild(closeButton)            modal.appendChild(child)            document.body.appendChild(modal)        }    };});