define(['jquery'], function ($) {    return function (reader) {        let _reader = reader;        let self = this;        let _paginationInfo;        let _view;        this.getNumberOfPages = function (paginationInfo, view) {            let result = 0;            _view = view;            _paginationInfo = [];            for (const [key, value] of Object.entries(paginationInfo)) {                _paginationInfo[key] = value;                result += value % 2 && _view === 'landscape' ? value + 1: value;            }            return result;        }        this.getCurrentPosition = function () {            const currentChapter = ReadiumSDK.reader.getPaginationInfo().openPages[0];            let currentPage = 0;            let currentPages = {left: undefined, right: undefined};            for (let i in _paginationInfo) {                if (i === currentChapter.idref){                    currentPage += currentChapter.spineItemPageIndex+1                    break;                } else {                    const pagesInChapter = _paginationInfo[i];                    currentPage += pagesInChapter % 2 && _view === 'landscape' ? pagesInChapter + 1: pagesInChapter;                }            }            currentPages.left = currentPage;            if( _view === 'landscape' ) {                currentPages.right = currentPage + 1;            }            return {currentPages, currentChapter};        }        this.getCurrentPositionPrePaginated = function () {            let currentPages = {left: undefined, right: undefined};            const items = ReadiumSDK.reader.spine().items;            const openPages = ReadiumSDK.reader.getPaginationInfo().openPages;            currentPages.left = items.find((el) => el.idref === openPages[0].idref).index+1;            if(openPages[1]) {                currentPages.right = items.find((el) => el.idref === openPages[1].idref).index+1;            }            return {currentPages, currentChapter: openPages[0]};        }        this.getPosByPageIndex = function (index) {            let chapter = '';            let pages = 0;            for (let i in _paginationInfo) {                const pagesInChapter = _paginationInfo[i];                if( index <= pages ) {                    break;                } else {                    chapter = i;                    pages  += pagesInChapter % 2 && _view === 'landscape' ? pagesInChapter + 1: pagesInChapter;                }            }            pages -= _paginationInfo[chapter] % 2 && _view === 'landscape' ? _paginationInfo[chapter] + 1: _paginationInfo[chapter];            console.log('xaas q', index, pages,  chapter, _paginationInfo)            return { chapter, page:  index - pages }        }        this.getPosByPageIndexPrePaginated = function (index) {            const items = ReadiumSDK.reader.spine().items;            let chapter = items.find((el) => el.index === index-1).idref;            console.log('xaaq 1',items, index, chapter)            return { chapter, page: 1 };        }        this.getPagesCount = async function () {            ReadiumSDK.reader.plugins.tokenizer.setEnabled(false);            const result = [];            const spines = _reader.spine().items;            let sum = 0;            for(let i in spines) {                console.log('xaas q', spines[i]);                await (new Promise((resolve) => {                    _reader.updateSettings({fontSelection: 0});                    _reader.openSpineItemPage(spines[i].idref);                    ReadiumSDK.reader.once('PaginationChanged', (data) => {                        ReadiumSDK.reader.once('SettingsApplied', () => {                            const { paginationInfo } = data//_reader.getPaginationInfo();                            console.log('xaas 2', paginationInfo.openPages[0]);                            result[paginationInfo.openPages[0].idref] = paginationInfo.openPages[0].spineItemPageCount;                            sum += paginationInfo.openPages[0].spineItemPageCount;                            resolve();                        });                        _reader.updateSettings({fontSelection: 5});                    });                }));            }            ReadiumSDK.reader.plugins.tokenizer.setEnabled(true);            console.log('xaas 2', sum, result);        }        window.getPagesCount = this.getPagesCount;    }});