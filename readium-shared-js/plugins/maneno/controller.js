define(['jquery', 'eventEmitter', './service', './styles'],    function($, EventEmitter, Service, Styles) {    return function () {        let self = this;        const service = new Service();        let _packageDocument;        let _TOC = undefined;        let _dom;        let _reader;        let _view;        this.init = function (packageDocument, reader) {            _packageDocument = packageDocument;            _reader = reader;            packageDocument.generateTocListDOM(function (dom) {                _dom = dom;                _TOC = service.getTOC(_dom);            });        }        this.getTOC = function () {            return _TOC;        }        this.openSpineByIdref = function (idref) {            _reader.openSpineItemPage(idref);        }        this.openPageNext = function () {            _reader.openPageNext();        }        this.openPagePrev = function () {            _reader.openPagePrev();        }        this.whereCanIGo = function () {            return {                canGoNext: _reader.getPaginationInfo().canGoNext(),                canGoPrev: _reader.getPaginationInfo().canGoPrev(),            }        }        this.setView = function (view) {            const views = {                'landscape': 'double',                'vertical': 'single',            }            if(views[view] !== undefined) {                _reader.updateSettings({syntheticSpread: views[view]});                _view = view;            }        }        this.setFontSize = function (size) {            _reader.updateSettings({fontSize: +size});        }        this.setFont = function (size) {            _reader.updateSettings({fontSize: +size});        }        this.setTheme = function (theme) {            const themes = {                dark: Styles.darkTheme,                light: Styles.lightTheme,            }            if(themes[theme] !== undefined) {                const themeObj = themes[theme]();                _reader.setBookStyles(themeObj);                $('#viewport').css('background-color', themeObj[0].declarations.backgroundColor);            }        }    };});