define(['jquery','underscore', 'eventEmitter', './service', './styles', './fonts/fonts', './cache.service', './pagination.service'],    function($,_, EventEmitter, Service, Styles, Fonts, CacheService, PaginationService) {    return function () {        let self = this;        const bookTypes = {true: 'pre-paginated', false: 'reflowable'}        const service = new Service();        let _typeOfBook = undefined;        let cacheService = {};        let paginationService = {};        let _packageDocument;        let _TOC = undefined;        let _dom;        let _reader;        let _view;        let _fontSize;        let _fontFamily;        let _metaData;        let _fonts = [];        let _updateSelectorsCallback;        let _isReflowable = () => !_typeOfBook;        this.init = function (packageDocument, reader, infoElement) {            _packageDocument = packageDocument;            _reader = reader;            _fonts = Fonts.getFontFaces();            maneno.font = _fonts[0];            maneno.updateStylesOnPageChanges = true;            _fontSize = 100;            _fontFamily = maneno.font.fontFamily;            _metaData = _reader.metadata();            _view = 'landscape'            cacheService = new CacheService(_reader);            paginationService = new PaginationService(_reader);            _typeOfBook = ReadiumSDK.reader.isCurrentViewFixedLayout();            packageDocument.generateTocListDOM(function (dom) {                _dom = dom;                _TOC = service.getTOC(_dom);                ReadiumSDK.reader.once('ContentDocumentLoaded', () => {                    self.getPagination().then(() => {                        _updateSelectors();                        self.showInfo();                    });                });            });        }        this.getTOC = function () {            return _TOC;        }        this.openSpineByIdref = function (idref) {            _reader.openSpineItemPage(idref);            _reader.once('PaginationChanged', function () {                self.showInfo();            })        }        this.openPageNext = function () {            _reader.openPageNext();            _reader.once('PaginationChanged', function () {                self.showInfo();            })        }        this.openPagePrev = function () {            _reader.openPagePrev();            _reader.once('PaginationChanged', function () {                self.showInfo();            })        }        this.whereCanIGo = function () {            return {                canGoNext: _reader.getPaginationInfo().canGoNext(),                canGoPrev: _reader.getPaginationInfo().canGoPrev(),            }        }        this.setView = function (view) {            const views = {                'landscape': { view: 'double', viewPortWidth: '1000px'},                'vertical': { view: 'single', viewPortWidth: '500px'},            }            if(views[view] !== undefined) {                $('#viewport').css('width', views[view].viewPortWidth);                _reader.updateSettings({syntheticSpread: views[view].view});                _view = view;                self.getPagination().then(() => {                    _updateSelectors()                    self.showInfo();                });            }        }        this.setFontSize = function (size) {            _fontSize = size;            _reader.updateSettings({fontSize: +size});            self.getPagination().then(() => {                _updateSelectors()                self.showInfo();            });        }        this.setFontFamily = function (font) {            maneno.font = _fonts.find((e) => e.fontFamily === font);            _fontFamily =  maneno.font.fontFamily;            console.log('xaaq 4', maneno.font);            _reader.updateSettings({fontSize:_fontSize});            self.getPagination().then(() => {                self.showInfo();             });        }        this.setTheme = function (theme) {            const themes = {                dark: Styles.darkTheme,                light: Styles.lightTheme,                dyslexic: Styles.dyslexic,            }            if(themes[theme] !== undefined) {                const themeObj = themes[theme]();                _reader.setBookStyles(themeObj);                $('#viewport').css('background-color', themeObj[0].declarations.backgroundColor);                self.getPagination().then(() => {                    _updateSelectors()                    self.showInfo();                });            }        }        this.getPagination = function () {                $(`#info1`).text('Loading...');                return new Promise((resolve) => {                    if(_isReflowable()) {                        cacheService.getHash({                            title: _metaData.title,                            epubVersion: _metaData.epubVersion,                            modifiedDate: _metaData.modifiedDate,                            fontSize: _fontSize,                            fontFamily: _fontFamily,                            viewType: _view,                        });                        cacheService.getPagination().then((hasCache) => {                            ReadiumSDK.reader.updateSettings({                                doNotUpdateView: false, fontSelection: 2                            });                            resolve()                        });                    } else {                        resolve();                    }                });        }        this.openPage = function (index) {            // todo ....            const pos = (                _isReflowable() ?                    paginationService.getPosByPageIndex :                    paginationService.getPosByPageIndexPrePaginated                )(index);            _reader.openSpineItemPage(pos.chapter, pos.page-1);            ReadiumSDK.reader.once('PaginationChanged', () => {                self.showInfo();            });            console.log('xaas 2', pos);        }        this.getBookInfo = function () {            return {                type: bookTypes[_typeOfBook],                TOC: _TOC,                pagesCount: _getNumOfPages(),                fonts: _fonts,                fontSize: [],                volumes: [],                speeds: [],            }        }        this.getCurrentPosition = function () {            const numOfPages = _getNumOfPages();            const {currentPages, currentChapter} = (                    _isReflowable() ?                    paginationService.getCurrentPosition :                    paginationService.getCurrentPositionPrePaginated                )();            const chapter = _getCurrentChapterBasedOnTOC(currentChapter);            return {                selectedChapterValue: chapter,                selectedPageIndex: currentPages,                selectedFontFamily: _fontFamily,                selectedFontSize: _fontSize,            }        }        /*Private*Methods*******************************/        function _getNumOfPages() {            if(_isReflowable()) {                return paginationService.getNumberOfPages(cacheService.getPaginationInfo(), _view);            } else {                return _reader.getPaginationInfo().spineItemCount;            }        }        function _getCurrentChapterBasedOnTOC(chapter){            console.log('xaae', chapter, _TOC)            const items = _reader.spine().items;            let tocIndex = 0;            let result = '';            for(let i in items) {                if(items[i].idref === _TOC[tocIndex].idref){                    result = items[i].idref;                    tocIndex++;                }                if(items[i].idref === chapter.idref){                    break;                }            }            return result;        }        /**         *         * @param element         */        this.showInfo = function () {            maneno.emit('POSITION_CHANGED', self.getCurrentPosition())        }        /**         *         * @private         */        function _updateSelectors() {            maneno.emit('STATE_CHANGED', self.getBookInfo())        }    };});