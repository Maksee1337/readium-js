define(['jquery', 'eventEmitter', './service', './styles', './fonts/fonts', './cache.service', './pagination.service'],    function($, EventEmitter, Service, Styles, Fonts, CacheService, PaginationService) {    return function () {        let self = this;        const service = new Service();        let cacheService = {};        let paginationService = {};        let _packageDocument;        let _TOC = undefined;        let _dom;        let _reader;        let _view;        let _fontSize;        let _fontFamily;        let _metaData;        let _fonts = []        this.init = function (packageDocument, reader, infoElement) {            _packageDocument = packageDocument;            _reader = reader;            _fonts = Fonts.getFontFaces();            maneno.font = _fonts[0];            maneno.updateStylesOnPageChanges = true;            _fontSize = 100;            _fontFamily = maneno.font.fontFamily;            _metaData = _reader.metadata();            _view = 'landscape'            cacheService = new CacheService(_reader);            paginationService = new PaginationService(_reader);            packageDocument.generateTocListDOM(function (dom) {                _dom = dom;                _TOC = service.getTOC(_dom);                ReadiumSDK.reader.once('ContentDocumentLoaded', () => {                    self.getPagination().then(() => {                        _updateSelectors();                        self.showInfo();                    });                });            });        }        this.getTOC = function () {            return _TOC;        }        this.openSpineByIdref = function (idref) {            _reader.openSpineItemPage(idref);            _reader.once('PaginationChanged', function () {                self.showInfo();            })        }        this.openPageNext = function () {            _reader.openPageNext();            _reader.once('PaginationChanged', function () {                self.showInfo();            })        }        this.openPagePrev = function () {            _reader.openPagePrev();            _reader.once('PaginationChanged', function () {                self.showInfo();            })        }        this.whereCanIGo = function () {            return {                canGoNext: _reader.getPaginationInfo().canGoNext(),                canGoPrev: _reader.getPaginationInfo().canGoPrev(),            }        }        this.setView = function (view) {            const views = {                'landscape': { view: 'double', viewPortWidth: '1000px'},                'vertical': { view: 'single', viewPortWidth: '500px'},            }            if(views[view] !== undefined) {                $('#viewport').css('width', views[view].viewPortWidth);                _reader.updateSettings({syntheticSpread: views[view].view});                _view = view;                self.getPagination().then(() => {                    _updateSelectors()                    self.showInfo();                });            }        }        this.setFontSize = function (size) {            _fontSize = size;            _reader.updateSettings({fontSize: +size});            self.getPagination().then(() => {                _updateSelectors()                self.showInfo();            });        }        this.setFontFamily = function (font) {            maneno.font = _fonts.find((e) => e.fontFamily === font);            _fontFamily =  maneno.font.fontFamily;            console.log('xaaq 4', maneno.font);            _reader.updateSettings({fontSize:_fontSize});            self.getPagination().then(() => {                self.showInfo();             });        }        this.setTheme = function (theme) {            const themes = {                dark: Styles.darkTheme,                light: Styles.lightTheme,                dyslexic: Styles.dyslexic,            }            if(themes[theme] !== undefined) {                const themeObj = themes[theme]();                _reader.setBookStyles(themeObj);                $('#viewport').css('background-color', themeObj[0].declarations.backgroundColor);                self.getPagination().then(() => {                    _updateSelectors()                    self.showInfo();                });            }        }        this.getPagination = function () {            $(`#info1`).text('Loading...');            return new Promise((resolve) => {                cacheService.getHash({                    title: _metaData.title,                    epubVersion: _metaData.epubVersion,                    modifiedDate: _metaData.modifiedDate,                    fontSize: _fontSize,                    fontFamily: _fontFamily,                    viewType: _view,                });                cacheService.getPagination().then((hasCache) => {                   ReadiumSDK.reader.updateSettings({                            doNotUpdateView: false,fontSelection: 2                   });                   resolve()                });            });        }        this.openPage = function (index) {            // todo ....            const pos = paginationService.getPosByPageIndex(index);            _reader.openSpineItemPage(pos.chapter, pos.page-1);            ReadiumSDK.reader.once('PaginationChanged', () => {                self.showInfo();            });            console.log('xaas 2', pos);        }        this.showInfo = function (element = 'info1') {            const numOfPages = _getNumOfPages();            const {currentPage, currentChapter} = paginationService.getCurrentPosition();            console.log('xaas pos', currentPage)            let message = `Pages in book: ${numOfPages}. Current page: ${currentPage} - ${currentPage+1}`;            $("#selectPage").val(currentPage);            $("#selectChapter").val(_getCurrentChapterBasedOnTOC(currentChapter));            $("#selectFontFamily").val(_fontFamily);            $("#selectFontSize").val(_fontSize);            $(`#${element}`).text(message);        }        /*Private*Methods*******************************/        function _getNumOfPages() {            return paginationService.getNumberOfPages(cacheService.getPaginationInfo(), _view);        }        function _getCurrentChapterBasedOnTOC(chapter){            console.log('xaae', chapter, _TOC)            const items = _reader.spine().items;            let tocIndex = 0;            let result = '';            for(let i in items) {                if(items[i].idref === _TOC[tocIndex].idref){                    result = items[i].idref;                    tocIndex++;                }                if(items[i].idref === chapter.idref){                    break;                }            }            return result;        }        function _updateSelectors() {            $("#selectFontFamily").empty();            $("#selectChapter").empty();            $("#selectPage").empty();            for(let i = 0 ; i < _fonts.length ; i++) {                var o = new Option(`${_fonts[i].displayName}`, `${_fonts[i].fontFamily}`);                $("#selectFontFamily").append(o);            }            for(let i = 0 ; i < _getNumOfPages() ; i++) {                var o = new Option(`${i+1}`, `${i+1}`);                $("#selectPage").append(o);            }            for(let i = 0 ; i < _TOC.length ; i++) {                var o = new Option(_TOC[i].title, _TOC[i].idref);                $("#selectChapter").append(o);            }        }    };});