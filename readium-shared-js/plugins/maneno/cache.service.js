define(['jquery'], function ($) {    return function (reader) {        let _reader = reader;        let self = this;        let _currentHash;        let _pagesInfo = {};        let _hashesStorage = [];        /**         *         * @param inputData = {title, epubVersion, modifiedDate, fontSize, fontFamily, viewType}         * @returns {*}         */        function _findHash(hash) {            const data = localStorage.getItem(hash);            if (!data) {         //       alert('und')                return undefined;            }            return JSON.parse(data);        }        function _addHash(hash, paginationInfo) {            _pagesInfo = {};            for(let i in paginationInfo.data) {                _pagesInfo[i] = paginationInfo.data[i];            }            console.log('xaas x', paginationInfo)            localStorage.setItem(hash, JSON.stringify(_pagesInfo));        }        this.getPaginationInfo = function () {            return _findHash(_currentHash);        }        this.getHash = function (fingerPrint) {            _currentHash = md5(Object.entries(fingerPrint).join(';'));            console.log('xaas', _currentHash, fingerPrint, _hashesStorage);            return {                hash: _currentHash,                fingerPrint,            }        }        this.getPagination = function () {            return new Promise((resolve, reject) => {                ReadiumSDK.reader.once('PaginationChanged', () => {                    if(_findHash(_currentHash) === undefined) {                        maneno.updateStylesOnPageChanges = false;                        _reader.getPagesCount();                        _reader.once('CurrentViewPaginationCalculated', (data) => {                            _pagesInfo = [];                            for(let i in data) {                                _pagesInfo[i] = data[i];                            }                            console.log('xaas',_pagesInfo)                            _addHash(_currentHash, {data: _pagesInfo});                            maneno.updateStylesOnPageChanges = true;                            resolve(false);                        });                    } else {                        resolve(true);                    }                });            });        }    }});